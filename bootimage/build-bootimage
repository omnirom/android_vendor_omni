#!/bin/bash

CMD="$1"
A_TOP=${ANDROID_BUILD_TOP}
CUR_DIR=`dirname $0`
DATE=$(date +%D)
MACHINE_TYPE=`uname -m`
OMNI_VERSION=4.4

# Common defines (Arch-dependent)
case `uname -s` in
    Darwin)
        txtrst='\033[0m'  # Color off
        txtred='\033[0;31m' # Red
        txtgrn='\033[0;32m' # Green
        txtylw='\033[0;33m' # Yellow
        txtblu='\033[0;34m' # Blue
        THREADS=`sysctl -an hw.logicalcpu`
        ;;
    *)
        txtrst='\e[0m'  # Color off
        txtred='\e[0;31m' # Red
        txtgrn='\e[0;32m' # Green
        txtylw='\e[0;33m' # Yellow
        txtblu='\e[0;34m' # Blue
        THREADS=`cat /proc/cpuinfo | grep processor | wc -l`
        ;;
esac

# create kernel zip after successfull build
create_kernel_zip()
{
    mmm ${A_TOP}/vendor/omni/bootimage -j${THREADS}

    if [ ! -e ${ANDROID_PRODUCT_OUT}/obj/EXECUTABLES/updater_intermediates/updater ]; then
        mka updater
    fi
    if [ ! -e ${ANDROID_HOST_OUT}/framework/signapk.jar ]; then
        mka signapk
    fi

    echo -e "${txtgrn}Creating kernel zip...${txtrst}"
    if [ -e ${ANDROID_PRODUCT_OUT}/boot.img ]; then
        echo -e "${txtgrn}Bootimage found...${txtrst}"
        if [ -e ${A_TOP}/device/*/${CMD}/kernel_updater-script ]; then

            echo -e "${txtylw}Package KERNELUPDATE:${txtrst} out/target/product/${CMD}/kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}-signed.zip"
            cd ${ANDROID_PRODUCT_OUT}

            rm -rf kernel_zip
            rm kernel-omni-${OMNI_VERSION}-*

            mkdir -p kernel_zip/system/lib/modules
            mkdir -p kernel_zip/META-INF/com/google/android

            echo "Copying boot.img..."
            cp boot.img kernel_zip/
            echo "Copying kernel modules..."
            cp -R system/lib/modules/* kernel_zip/system/lib/modules
            echo "Copying update-binary..."
            cp obj/EXECUTABLES/updater_intermediates/updater kernel_zip/META-INF/com/google/android/update-binary
            echo "Copying updater-script..."
            cat ${A_TOP}/device/*/${CMD}/kernel_updater-script > kernel_zip/META-INF/com/google/android/updater-script
                
            echo "Zipping package..."
            cd kernel_zip
            zip -qr ../kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}.zip ./
            cd ${ANDROID_PRODUCT_OUT}

            echo "Signing package..."
            java -jar ${ANDROID_HOST_OUT}/framework/signapk.jar ${A_TOP}/build/target/product/security/testkey.x509.pem ${A_TOP}/build/target/product/security/testkey.pk8 kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}.zip kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}-signed.zip
            rm kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}.zip
            echo -e "${txtgrn}Package complete:${txtrst} out/target/product/${CMD}/kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}-signed.zip"
            md5sum kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}-signed.zip
            cd ${A_TOP}
        else
            echo -e "${txtred}No instructions to create out/target/product/${CMD}/kernel-omni-${OMNI_VERSION}-$(date +%Y%m%d)-${CMD}-signed.zip... skipping."
            echo -e "\r\n ${txtrst}"
        fi
    else
        echo -e "${txtred}Bootimage not found... skipping."
        echo -e "\r\n ${txtrst}"
    fi
}

echo -e "${txtblu} #####################################################################"
echo -e "${txtblu} \r\n"
echo -e "${txtblu}              OmniROM ${OMNI_VERSION} buildscript for bootimage"
echo -e "${txtblu}              visit us @ http://www.omnirom.org"
echo -e "${txtblu} \r\n"
echo -e "${txtblu} #####################################################################"
echo -e "\r\n ${txtrst}"

# Check for build target
if [ -z "${CMD}" ]; then
    CMD=${CUSTOM_BUILD}
    if [ -z "${CMD}" ]; then
        echo -e "${txtred}No build target set."
        echo -e "${txtred}Usage: ./build-bootimage [device name] (bootimage build)"
        echo -e "${txtred}       ./build-bootimage clean (cleanup only kernel files)"
        echo -e "\r\n ${txtrst}"
        exit
    fi
fi

# Starting Timer
START=$(date +%s)

. build/envsetup.sh
lunch=omni_${CMD}-userdebug

# Device specific settings
case "$CMD" in
    clean)
        rm -rf ${ANDROID_PRODUCT_OUT}/kernel_zip
        rm -rf ${ANDROID_PRODUCT_OUT}/kernel
        rm -rf ${ANDROID_PRODUCT_OUT}/boot.img
        rm -rf ${ANDROID_PRODUCT_OUT}/root
        rm -rf ${ANDROID_PRODUCT_OUT}/ramdisk*
        rm -rf ${ANDROID_PRODUCT_OUT}/combined*
        rm -rf ${ANDROID_PRODUCT_OUT}/kernel-omni-*
        rm -rf ./out/target/product/${CMD}/obj/KERNEL*
        exit
        ;;
    *)
        create_kernel_zip
        ;;
esac

END=$(date +%s)
ELAPSED=$((END - START))
E_MIN=$((ELAPSED / 60))
E_SEC=$((ELAPSED - E_MIN * 60))
printf "${txtgrn}Elapsed: "
[ $E_MIN != 0 ] && printf "%d min(s) " $E_MIN
printf "%d sec(s)\n ${txtrst}" $E_SEC
